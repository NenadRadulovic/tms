# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  container-jobs:
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container:
      image: node:20.2-alpine
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DATABASES: tms_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: "Create .env file"
        run: echo "DATABASE_URL=postgresql://admin:admin@postgres:5432/tms_test" > .env
        # run: echo {{ secrets.DEV_ENV}} > .env
        
        
      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      # Runs a script that creates a PostgreSQL table, populates
      # the table with data, and then retrieves the data.
      - name: Generate Prisma Client
        run: |
          npx prisma generate
          npx prisma migrate deploy
      - name: Tests
        run: npm run test